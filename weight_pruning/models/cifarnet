class Cifar10Net(nn.Module):
    def __init__(self, T=8, v_threshold=1.0, v_reset=0.0, tau=2.0, surrogate_function=surrogate.ATan()):
        super().__init__()

        self.train_times = 0
        self.epochs = 0
        self.max_test_acccuracy = 0

        self.static_conv = nn.Sequential(
            nn.Conv2d(3, 256, kernel_size=3, padding=1, bias=False),
            nn.BatchNorm2d(256),
        )

        self.conv = nn.Sequential(
            nn.ReLU(),
            nn.Conv2d(256, 256, kernel_size=3, padding=1, bias=False),
            nn.BatchNorm2d(256),
            nn.ReLU(),

            nn.Conv2d(256, 256, kernel_size=3, padding=1, bias=False),
            nn.BatchNorm2d(256),
            nn.ReLU(),

            nn.MaxPool2d(2, 2),  # 16 * 16

            nn.Conv2d(256, 256, kernel_size=3, padding=1, bias=False),
            nn.BatchNorm2d(256),
            nn.ReLU(),

            nn.Conv2d(256, 256, kernel_size=3, padding=1, bias=False),
            nn.BatchNorm2d(256),
            nn.ReLU(),

            nn.Conv2d(256, 256, kernel_size=3, padding=1, bias=False),
            nn.BatchNorm2d(256),
            nn.ReLU(),

            nn.MaxPool2d(2, 2)  # 8 * 8
        )
        self.fc = nn.Sequential(
            nn.Flatten(),
            layer.Dropout(0.5),
            
            nn.Linear(256 * 8 * 8, 128 * 4 * 4, bias=False),
            nn.ReLU(),

            nn.Linear(128 * 4 * 4, 100, bias=False),
            nn.ReLU()
        )
        self.boost = nn.AvgPool1d(10, 10)

    def forward(self, pruner, x, is_adain=False, is_drop=False, feat=None):
        x = self.static_conv(x)
        out_spikes_counter += self.boost(self.fc(self.conv(x)).unsqueeze(1)).squeeze(1)
        x = self.state_conv[0](x)
        x = self.state_conv[1](x, pruner.masks)
        for i in range(len(self.conv)):
            if(isinstance(self.conv[i], myRN3d)):
                x = self.conv[i](x, pruner.get_mask())
            elif isinstance(self.conv[i], LIFAct):
                x, v = self.conv[i](x)
                # v_list.append((v, x.detach()))
                v_list.append((v, x))
            else:
                x = self.conv[i](x)
        for i in range(len(self.conv)):
        return out_spikes_counter